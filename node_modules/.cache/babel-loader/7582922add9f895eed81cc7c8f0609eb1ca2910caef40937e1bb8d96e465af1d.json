{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nconst DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS\n};\nconst DEFAULT_DB_OPTIONS = {\n  schema: 'public'\n};\nconst DEFAULT_AUTH_OPTIONS = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  flowType: 'implicit'\n};\nconst DEFAULT_REALTIME_OPTIONS = {};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(supabaseUrl, supabaseKey, options) {\n    var _this = this;\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    this.from = relation => {\n      return this.rest.from(relation);\n    };\n    /**\n     * Perform a query on a schema distinct from the default schema supplied via\n     * the `options.db.schema` constructor parameter.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The name of the schema to query\n     */\n    this.schema = schema => {\n      return this.rest.schema(schema);\n    };\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    this.rpc = function (fn) {\n      let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let options = arguments.length > 2 ? arguments[2] : undefined;\n      return _this.rest.rpc(fn, args, options);\n    };\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n    this.realtimeUrl = \"\".concat(_supabaseUrl, \"/realtime/v1\").replace(/^http/i, 'ws');\n    this.authUrl = \"\".concat(_supabaseUrl, \"/auth/v1\");\n    this.storageUrl = \"\".concat(_supabaseUrl, \"/storage/v1\");\n    this.functionsUrl = \"\".concat(_supabaseUrl, \"/functions/v1\");\n    // default storage key uses the supabase project ref as a namespace\n    const defaultStorageKey = \"sb-\".concat(new URL(this.authUrl).hostname.split('.')[0], \"-auth-token\");\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), {\n        storageKey: defaultStorageKey\n      }),\n      global: DEFAULT_GLOBAL_OPTIONS\n    };\n    const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n    this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n    this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n    this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n    this.rest = new PostgrestClient(\"\".concat(_supabaseUrl, \"/rest/v1\"), {\n      headers: this.headers,\n      schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n      fetch: this.fetch\n    });\n    this._listenForAuthEvents();\n  }\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this.headers,\n      customFetch: this.fetch\n    });\n  }\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n  }\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n  channel(name) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      config: {}\n    };\n    return this.realtime.channel(name, opts);\n  }\n  /**\n   * Returns all Realtime channels.\n   */\n  getChannels() {\n    return this.realtime.getChannels();\n  }\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n  removeChannel(channel) {\n    return this.realtime.removeChannel(channel);\n  }\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n  removeAllChannels() {\n    return this.realtime.removeAllChannels();\n  }\n  _getAccessToken() {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data\n      } = yield this.auth.getSession();\n      return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n    });\n  }\n  _initSupabaseAuthClient(_ref, headers, fetch) {\n    let {\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      storageKey,\n      flowType,\n      debug\n    } = _ref;\n    const authHeaders = {\n      Authorization: \"Bearer \".concat(this.supabaseKey),\n      apikey: \"\".concat(this.supabaseKey)\n    };\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: Object.assign(Object.assign({}, authHeaders), headers),\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      flowType,\n      debug,\n      fetch\n    });\n  }\n  _initRealtimeClient(options) {\n    return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n      params: Object.assign({\n        apikey: this.supabaseKey\n      }, options === null || options === void 0 ? void 0 : options.params)\n    }));\n  }\n  _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n    });\n    return data;\n  }\n  _handleTokenChanged(event, source, token) {\n    if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n      // Token has changed\n      this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n      this.changedAccessToken = token;\n    } else if (event === 'SIGNED_OUT') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey);\n      if (source == 'STORAGE') this.auth.signOut();\n      this.changedAccessToken = undefined;\n    }\n  }\n}","map":{"version":3,"names":["FunctionsClient","PostgrestClient","RealtimeClient","StorageClient","SupabaseStorageClient","DEFAULT_HEADERS","fetchWithAuth","stripTrailingSlash","applySettingDefaults","SupabaseAuthClient","DEFAULT_GLOBAL_OPTIONS","headers","DEFAULT_DB_OPTIONS","schema","DEFAULT_AUTH_OPTIONS","autoRefreshToken","persistSession","detectSessionInUrl","flowType","DEFAULT_REALTIME_OPTIONS","SupabaseClient","constructor","supabaseUrl","supabaseKey","options","_this","from","relation","rest","rpc","fn","args","arguments","length","undefined","Error","_supabaseUrl","realtimeUrl","concat","replace","authUrl","storageUrl","functionsUrl","defaultStorageKey","URL","hostname","split","DEFAULTS","db","realtime","auth","Object","assign","storageKey","global","settings","_b","_a","_d","_c","_initSupabaseAuthClient","_e","_f","fetch","_getAccessToken","bind","_g","_initRealtimeClient","_h","_listenForAuthEvents","functions","customFetch","storage","channel","name","opts","config","getChannels","removeChannel","removeAllChannels","data","getSession","session","access_token","_ref","debug","authHeaders","Authorization","apikey","url","params","onAuthStateChange","event","_handleTokenChanged","source","token","changedAccessToken","setAuth","signOut"],"sources":["/Users/geuse/Desktop/today-i-learned/node_modules/@supabase/supabase-js/src/SupabaseClient.ts"],"sourcesContent":["import { FunctionsClient } from '@supabase/functions-js'\nimport { AuthChangeEvent } from '@supabase/gotrue-js'\nimport { PostgrestClient } from '@supabase/postgrest-js'\nimport {\n  RealtimeChannel,\n  RealtimeChannelOptions,\n  RealtimeClient,\n  RealtimeClientOptions,\n} from '@supabase/realtime-js'\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js'\nimport { DEFAULT_HEADERS } from './lib/constants'\nimport { fetchWithAuth } from './lib/fetch'\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers'\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\nimport { Fetch, GenericSchema, SupabaseClientOptions, SupabaseAuthClientOptions } from './lib/types'\n\nconst DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS,\n}\n\nconst DEFAULT_DB_OPTIONS = {\n  schema: 'public',\n}\n\nconst DEFAULT_AUTH_OPTIONS: SupabaseAuthClientOptions = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  flowType: 'implicit',\n}\n\nconst DEFAULT_REALTIME_OPTIONS: RealtimeClientOptions = {}\n\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient<\n  Database = any,\n  SchemaName extends string & keyof Database = 'public' extends keyof Database\n    ? 'public'\n    : string & keyof Database,\n  Schema extends GenericSchema = Database[SchemaName] extends GenericSchema\n    ? Database[SchemaName]\n    : any\n> {\n  /**\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n   */\n  auth: SupabaseAuthClient\n  realtime: RealtimeClient\n\n  protected realtimeUrl: string\n  protected authUrl: string\n  protected storageUrl: string\n  protected functionsUrl: string\n  protected rest: PostgrestClient<Database, SchemaName>\n  protected storageKey: string\n  protected fetch?: Fetch\n  protected changedAccessToken?: string\n\n  protected headers: {\n    [key: string]: string\n  }\n\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  constructor(\n    protected supabaseUrl: string,\n    protected supabaseKey: string,\n    options?: SupabaseClientOptions<SchemaName>\n  ) {\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\n\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws')\n    this.authUrl = `${_supabaseUrl}/auth/v1`\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\n    this.functionsUrl = `${_supabaseUrl}/functions/v1`\n\n    // default storage key uses the supabase project ref as a namespace\n    const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`\n    const DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: { ...DEFAULT_AUTH_OPTIONS, storageKey: defaultStorageKey },\n      global: DEFAULT_GLOBAL_OPTIONS,\n    }\n\n    const settings = applySettingDefaults(options ?? {}, DEFAULTS)\n\n    this.storageKey = settings.auth?.storageKey ?? ''\n    this.headers = settings.global?.headers ?? {}\n\n    this.auth = this._initSupabaseAuthClient(\n      settings.auth ?? {},\n      this.headers,\n      settings.global?.fetch\n    )\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), settings.global?.fetch)\n\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\n    this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n      headers: this.headers,\n      schema: settings.db?.schema,\n      fetch: this.fetch,\n    })\n\n    this._listenForAuthEvents()\n  }\n\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this.headers,\n      customFetch: this.fetch,\n    })\n  }\n\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch)\n  }\n\n  /**\n   * Perform a query on a table or a view.\n   *\n   * @param relation - The table or view name to query\n   */\n  from: PostgrestClient<Database, SchemaName>['from'] = (relation: string) => {\n    return this.rest.from(relation)\n  }\n\n  /**\n   * Perform a query on a schema distinct from the default schema supplied via\n   * the `options.db.schema` constructor parameter.\n   *\n   * The schema needs to be on the list of exposed schemas inside Supabase.\n   *\n   * @param schema - The name of the schema to query\n   */\n  schema: PostgrestClient<Database, SchemaName>['schema'] = <\n    DynamicSchema extends string & keyof Database\n  >(\n    schema: DynamicSchema\n  ) => {\n    return this.rest.schema<DynamicSchema>(schema)\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn - The function name to call\n   * @param args - The arguments to pass to the function call\n   * @param options - Named parameters\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   * @param options.count - Count algorithm to use to count rows returned by the\n   * function. Only applicable for [set-returning\n   * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  rpc: PostgrestClient<Database, SchemaName>['rpc'] = <\n    FunctionName extends string & keyof Schema['Functions'],\n    Function_ extends Schema['Functions'][FunctionName]\n  >(\n    fn: FunctionName,\n    args: Function_['Args'] = {},\n    options?: {\n      head?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    }\n  ) => {\n    return this.rest.rpc(fn, args, options)\n  }\n\n  /**\n   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n   *\n   * @param {string} name - The name of the Realtime channel.\n   * @param {Object} opts - The options to pass to the Realtime channel.\n   *\n   */\n  channel(name: string, opts: RealtimeChannelOptions = { config: {} }): RealtimeChannel {\n    return this.realtime.channel(name, opts)\n  }\n\n  /**\n   * Returns all Realtime channels.\n   */\n  getChannels(): RealtimeChannel[] {\n    return this.realtime.getChannels()\n  }\n\n  /**\n   * Unsubscribes and removes Realtime channel from Realtime client.\n   *\n   * @param {RealtimeChannel} channel - The name of the Realtime channel.\n   *\n   */\n  removeChannel(channel: RealtimeChannel): Promise<'ok' | 'timed out' | 'error'> {\n    return this.realtime.removeChannel(channel)\n  }\n\n  /**\n   * Unsubscribes and removes all Realtime channels from Realtime client.\n   */\n  removeAllChannels(): Promise<('ok' | 'timed out' | 'error')[]> {\n    return this.realtime.removeAllChannels()\n  }\n\n  private async _getAccessToken() {\n    const { data } = await this.auth.getSession()\n\n    return data.session?.access_token ?? null\n  }\n\n  private _initSupabaseAuthClient(\n    {\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      storageKey,\n      flowType,\n      debug,\n    }: SupabaseAuthClientOptions,\n    headers?: Record<string, string>,\n    fetch?: Fetch\n  ) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`,\n    }\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: { ...authHeaders, ...headers },\n      storageKey: storageKey,\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      storage,\n      flowType,\n      debug,\n      fetch,\n    })\n  }\n\n  private _initRealtimeClient(options: RealtimeClientOptions) {\n    return new RealtimeClient(this.realtimeUrl, {\n      ...options,\n      params: { ...{ apikey: this.supabaseKey }, ...options?.params },\n    })\n  }\n\n  private _listenForAuthEvents() {\n    let data = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, 'CLIENT', session?.access_token)\n    })\n    return data\n  }\n\n  private _handleTokenChanged(\n    event: AuthChangeEvent,\n    source: 'CLIENT' | 'STORAGE',\n    token?: string\n  ) {\n    if (\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n      this.changedAccessToken !== token\n    ) {\n      // Token has changed\n      this.realtime.setAuth(token ?? null)\n\n      this.changedAccessToken = token\n    } else if (event === 'SIGNED_OUT') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey)\n      if (source == 'STORAGE') this.auth.signOut()\n      this.changedAccessToken = undefined\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,eAAe,QAAQ,wBAAwB;AAExD,SAASC,eAAe,QAAQ,wBAAwB;AACxD,SAGEC,cAAc,QAET,uBAAuB;AAC9B,SAASC,aAAa,IAAIC,qBAAqB,QAAQ,sBAAsB;AAC7E,SAASC,eAAe,QAAQ,iBAAiB;AACjD,SAASC,aAAa,QAAQ,aAAa;AAC3C,SAASC,kBAAkB,EAAEC,oBAAoB,QAAQ,eAAe;AACxE,SAASC,kBAAkB,QAAQ,0BAA0B;AAG7D,MAAMC,sBAAsB,GAAG;EAC7BC,OAAO,EAAEN;CACV;AAED,MAAMO,kBAAkB,GAAG;EACzBC,MAAM,EAAE;CACT;AAED,MAAMC,oBAAoB,GAA8B;EACtDC,gBAAgB,EAAE,IAAI;EACtBC,cAAc,EAAE,IAAI;EACpBC,kBAAkB,EAAE,IAAI;EACxBC,QAAQ,EAAE;CACX;AAED,MAAMC,wBAAwB,GAA0B,EAAE;AAE1D;;;;;AAKA,eAAc,MAAOC,cAAc;EA4BjC;;;;;;;;;;;;EAYAC,YACYC,WAAmB,EACnBC,WAAmB,EAC7BC,OAA2C;IAAA,IAAAC,KAAA;;IAFjC,KAAAH,WAAW,GAAXA,WAAW;IACX,KAAAC,WAAW,GAAXA,WAAW;IA6DvB;;;;;IAKA,KAAAG,IAAI,GAAmDC,QAAgB,IAAI;MACzE,OAAO,IAAI,CAACC,IAAI,CAACF,IAAI,CAACC,QAAQ,CAAC;IACjC,CAAC;IAED;;;;;;;;IAQA,KAAAd,MAAM,GAGJA,MAAqB,IACnB;MACF,OAAO,IAAI,CAACe,IAAI,CAACf,MAAM,CAAgBA,MAAM,CAAC;IAChD,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;IAqBA,KAAAgB,GAAG,GAAiD,UAIlDC,EAAgB,EAMd;MAAA,IALFC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA0B,EAAE;MAAA,IAC5BR,OAGC,GAAAQ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAED,OAAOT,KAAI,CAACG,IAAI,CAACC,GAAG,CAACC,EAAE,EAAEC,IAAI,EAAEP,OAAO,CAAC;IACzC,CAAC;IApHC,IAAI,CAACF,WAAW,EAAE,MAAM,IAAIa,KAAK,CAAC,0BAA0B,CAAC;IAC7D,IAAI,CAACZ,WAAW,EAAE,MAAM,IAAIY,KAAK,CAAC,0BAA0B,CAAC;IAE7D,MAAMC,YAAY,GAAG7B,kBAAkB,CAACe,WAAW,CAAC;IAEpD,IAAI,CAACe,WAAW,GAAG,GAAAC,MAAA,CAAGF,YAAY,kBAAeG,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;IACxE,IAAI,CAACC,OAAO,MAAAF,MAAA,CAAMF,YAAY,aAAU;IACxC,IAAI,CAACK,UAAU,MAAAH,MAAA,CAAMF,YAAY,gBAAa;IAC9C,IAAI,CAACM,YAAY,MAAAJ,MAAA,CAAMF,YAAY,kBAAe;IAElD;IACA,MAAMO,iBAAiB,SAAAL,MAAA,CAAS,IAAIM,GAAG,CAAC,IAAI,CAACJ,OAAO,CAAC,CAACK,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,gBAAa;IACzF,MAAMC,QAAQ,GAAG;MACfC,EAAE,EAAEpC,kBAAkB;MACtBqC,QAAQ,EAAE9B,wBAAwB;MAClC+B,IAAI,EAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAOtC,oBAAoB;QAAEuC,UAAU,EAAEV;MAAiB,EAAE;MAChEW,MAAM,EAAE5C;KACT;IAED,MAAM6C,QAAQ,GAAG/C,oBAAoB,CAACgB,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE,EAAEuB,QAAQ,CAAC;IAE9D,IAAI,CAACM,UAAU,GAAG,CAAAG,EAAA,IAAAC,EAAA,GAAAF,QAAQ,CAACL,IAAI,cAAAO,EAAA,uBAAAA,EAAA,CAAEJ,UAAU,cAAAG,EAAA,cAAAA,EAAA,GAAI,EAAE;IACjD,IAAI,CAAC7C,OAAO,GAAG,CAAA+C,EAAA,IAAAC,EAAA,GAAAJ,QAAQ,CAACD,MAAM,cAAAK,EAAA,uBAAAA,EAAA,CAAEhD,OAAO,cAAA+C,EAAA,cAAAA,EAAA,GAAI,EAAE;IAE7C,IAAI,CAACR,IAAI,GAAG,IAAI,CAACU,uBAAuB,CACtC,CAAAC,EAAA,GAAAN,QAAQ,CAACL,IAAI,cAAAW,EAAA,cAAAA,EAAA,GAAI,EAAE,EACnB,IAAI,CAAClD,OAAO,EACZ,CAAAmD,EAAA,GAAAP,QAAQ,CAACD,MAAM,cAAAQ,EAAA,uBAAAA,EAAA,CAAEC,KAAK,CACvB;IACD,IAAI,CAACA,KAAK,GAAGzD,aAAa,CAACiB,WAAW,EAAE,IAAI,CAACyC,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAAC,EAAA,GAAAX,QAAQ,CAACD,MAAM,cAAAY,EAAA,uBAAAA,EAAA,CAAEH,KAAK,CAAC;IAEhG,IAAI,CAACd,QAAQ,GAAG,IAAI,CAACkB,mBAAmB,CAAAhB,MAAA,CAAAC,MAAA;MAAGzC,OAAO,EAAE,IAAI,CAACA;IAAO,GAAK4C,QAAQ,CAACN,QAAQ,EAAG;IACzF,IAAI,CAACrB,IAAI,GAAG,IAAI3B,eAAe,IAAAqC,MAAA,CAAIF,YAAY,eAAY;MACzDzB,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBE,MAAM,EAAE,CAAAuD,EAAA,GAAAb,QAAQ,CAACP,EAAE,cAAAoB,EAAA,uBAAAA,EAAA,CAAEvD,MAAM;MAC3BkD,KAAK,EAAE,IAAI,CAACA;KACb,CAAC;IAEF,IAAI,CAACM,oBAAoB,EAAE;EAC7B;EAEA;;;EAGA,IAAIC,SAASA,CAAA;IACX,OAAO,IAAItE,eAAe,CAAC,IAAI,CAAC0C,YAAY,EAAE;MAC5C/B,OAAO,EAAE,IAAI,CAACA,OAAO;MACrB4D,WAAW,EAAE,IAAI,CAACR;KACnB,CAAC;EACJ;EAEA;;;EAGA,IAAIS,OAAOA,CAAA;IACT,OAAO,IAAIpE,qBAAqB,CAAC,IAAI,CAACqC,UAAU,EAAE,IAAI,CAAC9B,OAAO,EAAE,IAAI,CAACoD,KAAK,CAAC;EAC7E;EA8DA;;;;;;;EAOAU,OAAOA,CAACC,IAAY,EAA+C;IAAA,IAA7CC,IAAA,GAAA3C,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA+B;MAAE4C,MAAM,EAAE;IAAE,CAAE;IACjE,OAAO,IAAI,CAAC3B,QAAQ,CAACwB,OAAO,CAACC,IAAI,EAAEC,IAAI,CAAC;EAC1C;EAEA;;;EAGAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAAC5B,QAAQ,CAAC4B,WAAW,EAAE;EACpC;EAEA;;;;;;EAMAC,aAAaA,CAACL,OAAwB;IACpC,OAAO,IAAI,CAACxB,QAAQ,CAAC6B,aAAa,CAACL,OAAO,CAAC;EAC7C;EAEA;;;EAGAM,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAAC9B,QAAQ,CAAC8B,iBAAiB,EAAE;EAC1C;EAEcf,eAAeA,CAAA;;;MAC3B,MAAM;QAAEgB;MAAI,CAAE,GAAG,MAAM,IAAI,CAAC9B,IAAI,CAAC+B,UAAU,EAAE;MAE7C,OAAO,CAAAzB,EAAA,IAAAC,EAAA,GAAAuB,IAAI,CAACE,OAAO,cAAAzB,EAAA,uBAAAA,EAAA,CAAE0B,YAAY,cAAA3B,EAAA,cAAAA,EAAA,GAAI,IAAI;;;EAGnCI,uBAAuBA,CAAAwB,IAAA,EAU7BzE,OAAgC,EAChCoD,KAAa;IAAA,IAVb;MACEhD,gBAAgB;MAChBC,cAAc;MACdC,kBAAkB;MAClBuD,OAAO;MACPnB,UAAU;MACVnC,QAAQ;MACRmE;IAAK,CACqB,GAAAD,IAAA;IAI5B,MAAME,WAAW,GAAG;MAClBC,aAAa,YAAAjD,MAAA,CAAY,IAAI,CAACf,WAAW,CAAE;MAC3CiE,MAAM,KAAAlD,MAAA,CAAK,IAAI,CAACf,WAAW;KAC5B;IACD,OAAO,IAAId,kBAAkB,CAAC;MAC5BgF,GAAG,EAAE,IAAI,CAACjD,OAAO;MACjB7B,OAAO,EAAAwC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAOkC,WAAW,GAAK3E,OAAO,CAAE;MACvC0C,UAAU,EAAEA,UAAU;MACtBtC,gBAAgB;MAChBC,cAAc;MACdC,kBAAkB;MAClBuD,OAAO;MACPtD,QAAQ;MACRmE,KAAK;MACLtB;KACD,CAAC;EACJ;EAEQI,mBAAmBA,CAAC3C,OAA8B;IACxD,OAAO,IAAItB,cAAc,CAAC,IAAI,CAACmC,WAAW,EAAAc,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACrC5B,OAAO;MACVkE,MAAM,EAAAvC,MAAA,CAAAC,MAAA,CAAO;QAAEoC,MAAM,EAAE,IAAI,CAACjE;MAAW,CAAE,EAAKC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEkE,MAAM;IAAA,GAC7D;EACJ;EAEQrB,oBAAoBA,CAAA;IAC1B,IAAIW,IAAI,GAAG,IAAI,CAAC9B,IAAI,CAACyC,iBAAiB,CAAC,CAACC,KAAK,EAAEV,OAAO,KAAI;MACxD,IAAI,CAACW,mBAAmB,CAACD,KAAK,EAAE,QAAQ,EAAEV,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,YAAY,CAAC;IAClE,CAAC,CAAC;IACF,OAAOH,IAAI;EACb;EAEQa,mBAAmBA,CACzBD,KAAsB,EACtBE,MAA4B,EAC5BC,KAAc;IAEd,IACE,CAACH,KAAK,KAAK,iBAAiB,IAAIA,KAAK,KAAK,WAAW,KACrD,IAAI,CAACI,kBAAkB,KAAKD,KAAK,EACjC;MACA;MACA,IAAI,CAAC9C,QAAQ,CAACgD,OAAO,CAACF,KAAK,aAALA,KAAK,cAALA,KAAK,GAAI,IAAI,CAAC;MAEpC,IAAI,CAACC,kBAAkB,GAAGD,KAAK;KAChC,MAAM,IAAIH,KAAK,KAAK,YAAY,EAAE;MACjC;MACA,IAAI,CAAC3C,QAAQ,CAACgD,OAAO,CAAC,IAAI,CAAC1E,WAAW,CAAC;MACvC,IAAIuE,MAAM,IAAI,SAAS,EAAE,IAAI,CAAC5C,IAAI,CAACgD,OAAO,EAAE;MAC5C,IAAI,CAACF,kBAAkB,GAAG9D,SAAS;;EAEvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}