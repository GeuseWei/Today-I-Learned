{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isStorageError, StorageError } from '../lib/errors';\nimport { get, post, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nconst DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport default class StorageFileApi {\n  constructor(url) {\n    let headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    let fetch = arguments.length > 3 ? arguments[3] : undefined;\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  uploadOrUpdate(method, path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let body;\n        const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n          'x-upsert': String(options.upsert)\n        });\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n          headers['content-type'] = options.contentType;\n        }\n        const cleanPath = this._removeEmptyFolders(path);\n        const _path = this._getFinalPath(cleanPath);\n        const res = yield this.fetch(\"\".concat(this.url, \"/object/\").concat(_path), Object.assign({\n          method,\n          body: body,\n          headers\n        }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n          duplex: options.duplex\n        } : {}));\n        const data = yield res.json();\n        if (res.ok) {\n          return {\n            data: {\n              path: cleanPath,\n              id: data.Id,\n              fullPath: data.Key\n            },\n            error: null\n          };\n        } else {\n          const error = data;\n          return {\n            data: null,\n            error\n          };\n        }\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  upload(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Upload a file with a token generated from `createSignedUploadUrl`.\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param token The token generated from `createSignedUploadUrl`\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  uploadToSignedUrl(path, token, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const cleanPath = this._removeEmptyFolders(path);\n      const _path = this._getFinalPath(cleanPath);\n      const url = new URL(this.url + \"/object/upload/sign/\".concat(_path));\n      url.searchParams.set('token', token);\n      try {\n        let body;\n        const options = Object.assign({\n          upsert: DEFAULT_FILE_OPTIONS.upsert\n        }, fileOptions);\n        const headers = Object.assign(Object.assign({}, this.headers), {\n          'x-upsert': String(options.upsert)\n        });\n        if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n          body = new FormData();\n          body.append('cacheControl', options.cacheControl);\n          body.append('', fileBody);\n        } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n          body = fileBody;\n          body.append('cacheControl', options.cacheControl);\n        } else {\n          body = fileBody;\n          headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n          headers['content-type'] = options.contentType;\n        }\n        const res = yield this.fetch(url.toString(), {\n          method: 'PUT',\n          body: body,\n          headers\n        });\n        const data = yield res.json();\n        if (res.ok) {\n          return {\n            data: {\n              path: cleanPath,\n              fullPath: data.Key\n            },\n            error: null\n          };\n        } else {\n          const error = data;\n          return {\n            data: null,\n            error\n          };\n        }\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a signed upload URL.\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\n   * They are valid for 2 hours.\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   */\n  createSignedUploadUrl(path) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n        const data = yield post(this.fetch, \"\".concat(this.url, \"/object/upload/sign/\").concat(_path), {}, {\n          headers: this.headers\n        });\n        const url = new URL(this.url + data.url);\n        const token = url.searchParams.get('token');\n        if (!token) {\n          throw new StorageError('No token returned by API');\n        }\n        return {\n          data: {\n            signedUrl: url.toString(),\n            path,\n            token\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  update(path, fileBody, fileOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n    });\n  }\n  /**\n   * Moves an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n  move(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, \"\".concat(this.url, \"/object/move\"), {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Copies an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  copy(fromPath, toPath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, \"\".concat(this.url, \"/object/copy\"), {\n          bucketId: this.bucketId,\n          sourceKey: fromPath,\n          destinationKey: toPath\n        }, {\n          headers: this.headers\n        });\n        return {\n          data: {\n            path: data.Key\n          },\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  createSignedUrl(path, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        let _path = this._getFinalPath(path);\n        let data = yield post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(_path), Object.assign({\n          expiresIn\n        }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n          transform: options.transform\n        } : {}), {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"&download=\".concat(options.download === true ? '' : options.download) : '';\n        const signedUrl = encodeURI(\"\".concat(this.url).concat(data.signedURL).concat(downloadQueryParam));\n        data = {\n          signedUrl\n        };\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n  createSignedUrls(paths, expiresIn, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(this.bucketId), {\n          expiresIn,\n          paths\n        }, {\n          headers: this.headers\n        });\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"&download=\".concat(options.download === true ? '' : options.download) : '';\n        return {\n          data: data.map(datum => Object.assign(Object.assign({}, datum), {\n            signedUrl: datum.signedURL ? encodeURI(\"\".concat(this.url).concat(datum.signedURL).concat(downloadQueryParam)) : null\n          })),\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n   *\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  download(path, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n      const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      const queryString = transformationQuery ? \"?\".concat(transformationQuery) : '';\n      try {\n        const _path = this._getFinalPath(path);\n        const res = yield get(this.fetch, \"\".concat(this.url, \"/\").concat(renderPath, \"/\").concat(_path).concat(queryString), {\n          headers: this.headers,\n          noResolveJson: true\n        });\n        const data = yield res.blob();\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n   *\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  getPublicUrl(path, options) {\n    const _path = this._getFinalPath(path);\n    const _queryString = [];\n    const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"download=\".concat(options.download === true ? '' : options.download) : '';\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam);\n    }\n    const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n    const renderPath = wantsTransformation ? 'render/image' : 'object';\n    const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery);\n    }\n    let queryString = _queryString.join('&');\n    if (queryString !== '') {\n      queryString = \"?\".concat(queryString);\n    }\n    return {\n      data: {\n        publicUrl: encodeURI(\"\".concat(this.url, \"/\").concat(renderPath, \"/public/\").concat(_path).concat(queryString))\n      }\n    };\n  }\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n   */\n  remove(paths) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const data = yield remove(this.fetch, \"\".concat(this.url, \"/object/\").concat(this.bucketId), {\n          prefixes: paths\n        }, {\n          headers: this.headers\n        });\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n  //     throw error\n  //   }\n  // }\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   */\n  list(path, options, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n          prefix: path || ''\n        });\n        const data = yield post(this.fetch, \"\".concat(this.url, \"/object/list/\").concat(this.bucketId), body, {\n          headers: this.headers\n        }, parameters);\n        return {\n          data,\n          error: null\n        };\n      } catch (error) {\n        if (isStorageError(error)) {\n          return {\n            data: null,\n            error\n          };\n        }\n        throw error;\n      }\n    });\n  }\n  _getFinalPath(path) {\n    return \"\".concat(this.bucketId, \"/\").concat(path);\n  }\n  _removeEmptyFolders(path) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n  }\n  transformOptsToQueryString(transform) {\n    const params = [];\n    if (transform.width) {\n      params.push(\"width=\".concat(transform.width));\n    }\n    if (transform.height) {\n      params.push(\"height=\".concat(transform.height));\n    }\n    if (transform.resize) {\n      params.push(\"resize=\".concat(transform.resize));\n    }\n    if (transform.format) {\n      params.push(\"format=\".concat(transform.format));\n    }\n    if (transform.quality) {\n      params.push(\"quality=\".concat(transform.quality));\n    }\n    return params.join('&');\n  }\n}","map":{"version":3,"names":["isStorageError","StorageError","get","post","remove","resolveFetch","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","constructor","url","headers","arguments","length","undefined","bucketId","fetch","uploadOrUpdate","method","path","fileBody","fileOptions","body","options","Object","assign","String","Blob","FormData","append","concat","cleanPath","_removeEmptyFolders","_path","_getFinalPath","res","duplex","data","json","ok","id","Id","fullPath","Key","error","upload","uploadToSignedUrl","token","URL","searchParams","set","toString","createSignedUploadUrl","signedUrl","update","move","fromPath","toPath","sourceKey","destinationKey","copy","createSignedUrl","expiresIn","transform","downloadQueryParam","download","encodeURI","signedURL","createSignedUrls","paths","map","datum","wantsTransformation","renderPath","transformationQuery","transformOptsToQueryString","queryString","noResolveJson","blob","getPublicUrl","_queryString","push","join","publicUrl","prefixes","list","parameters","prefix","replace","params","width","height","resize","format","quality"],"sources":["/Users/geuse/Desktop/today-i-learned/node_modules/@supabase/storage-js/src/packages/StorageFileApi.ts"],"sourcesContent":["import { isStorageError, StorageError } from '../lib/errors'\nimport { Fetch, get, post, remove } from '../lib/fetch'\nimport { resolveFetch } from '../lib/helpers'\nimport {\n  FileObject,\n  FileOptions,\n  SearchOptions,\n  FetchParameters,\n  TransformOptions,\n} from '../lib/types'\n\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc',\n  },\n}\n\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false,\n}\n\ntype FileBody =\n  | ArrayBuffer\n  | ArrayBufferView\n  | Blob\n  | Buffer\n  | File\n  | FormData\n  | NodeJS.ReadableStream\n  | ReadableStream<Uint8Array>\n  | URLSearchParams\n  | string\n\nexport default class StorageFileApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected bucketId?: string\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    bucketId?: string,\n    fetch?: Fetch\n  ) {\n    this.url = url\n    this.headers = headers\n    this.bucketId = bucketId\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  private async uploadOrUpdate(\n    method: 'POST' | 'PUT',\n    path: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { id: string; path: string; fullPath: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let body\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const cleanPath = this._removeEmptyFolders(path)\n      const _path = this._getFinalPath(cleanPath)\n      const res = await this.fetch(`${this.url}/object/${_path}`, {\n        method,\n        body: body as BodyInit,\n        headers,\n        ...(options?.duplex ? { duplex: options.duplex } : {}),\n      })\n\n      const data = await res.json()\n\n      if (res.ok) {\n        return {\n          data: { path: cleanPath, id: data.Id, fullPath: data.Key },\n          error: null,\n        }\n      } else {\n        const error = data\n        return { data: null, error }\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async upload(\n    path: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Upload a file with a token generated from `createSignedUploadUrl`.\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param token The token generated from `createSignedUploadUrl`\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async uploadToSignedUrl(\n    path: string,\n    token: string,\n    fileBody: FileBody,\n    fileOptions?: FileOptions\n  ) {\n    const cleanPath = this._removeEmptyFolders(path)\n    const _path = this._getFinalPath(cleanPath)\n\n    const url = new URL(this.url + `/object/upload/sign/${_path}`)\n    url.searchParams.set('token', token)\n\n    try {\n      let body\n      const options = { upsert: DEFAULT_FILE_OPTIONS.upsert, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...{ 'x-upsert': String(options.upsert as boolean) },\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const res = await this.fetch(url.toString(), {\n        method: 'PUT',\n        body: body as BodyInit,\n        headers,\n      })\n\n      const data = await res.json()\n\n      if (res.ok) {\n        return {\n          data: { path: cleanPath, fullPath: data.Key },\n          error: null,\n        }\n      } else {\n        const error = data\n        return { data: null, error }\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a signed upload URL.\n   * Signed upload URLs can be used to upload files to the bucket without further authentication.\n   * They are valid for 2 hours.\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   */\n  async createSignedUploadUrl(\n    path: string\n  ): Promise<\n    | {\n        data: { signedUrl: string; token: string; path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let _path = this._getFinalPath(path)\n\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/upload/sign/${_path}`,\n        {},\n        { headers: this.headers }\n      )\n\n      const url = new URL(this.url + data.url)\n\n      const token = url.searchParams.get('token')\n\n      if (!token) {\n        throw new StorageError('No token returned by API')\n      }\n\n      return { data: { signedUrl: url.toString(), path, token }, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async update(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Moves an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n  async move(\n    fromPath: string,\n    toPath: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/move`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Copies an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  async copy(\n    fromPath: string,\n    toPath: string\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/copy`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data: { path: data.Key }, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  async createSignedUrl(\n    path: string,\n    expiresIn: number,\n    options?: { download?: string | boolean; transform?: TransformOptions }\n  ): Promise<\n    | {\n        data: { signedUrl: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let _path = this._getFinalPath(path)\n\n      let data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${_path}`,\n        { expiresIn, ...(options?.transform ? { transform: options.transform } : {}) },\n        { headers: this.headers }\n      )\n      const downloadQueryParam = options?.download\n        ? `&download=${options.download === true ? '' : options.download}`\n        : ''\n      const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`)\n      data = { signedUrl }\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n  async createSignedUrls(\n    paths: string[],\n    expiresIn: number,\n    options?: { download: string | boolean }\n  ): Promise<\n    | {\n        data: { error: string | null; path: string | null; signedUrl: string }[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${this.bucketId}`,\n        { expiresIn, paths },\n        { headers: this.headers }\n      )\n\n      const downloadQueryParam = options?.download\n        ? `&download=${options.download === true ? '' : options.download}`\n        : ''\n      return {\n        data: data.map((datum: { signedURL: string }) => ({\n          ...datum,\n          signedUrl: datum.signedURL\n            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n            : null,\n        })),\n        error: null,\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n   *\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  async download(\n    path: string,\n    options?: { transform?: TransformOptions }\n  ): Promise<\n    | {\n        data: Blob\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    const wantsTransformation = typeof options?.transform !== 'undefined'\n    const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object'\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\n    const queryString = transformationQuery ? `?${transformationQuery}` : ''\n\n    try {\n      const _path = this._getFinalPath(path)\n      const res = await get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n        headers: this.headers,\n        noResolveJson: true,\n      })\n      const data = await res.blob()\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n   *\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   * @param options.transform Transform the asset before serving it to the client.\n   */\n  getPublicUrl(\n    path: string,\n    options?: { download?: string | boolean; transform?: TransformOptions }\n  ): { data: { publicUrl: string } } {\n    const _path = this._getFinalPath(path)\n    const _queryString = []\n\n    const downloadQueryParam = options?.download\n      ? `download=${options.download === true ? '' : options.download}`\n      : ''\n\n    if (downloadQueryParam !== '') {\n      _queryString.push(downloadQueryParam)\n    }\n\n    const wantsTransformation = typeof options?.transform !== 'undefined'\n    const renderPath = wantsTransformation ? 'render/image' : 'object'\n    const transformationQuery = this.transformOptsToQueryString(options?.transform || {})\n\n    if (transformationQuery !== '') {\n      _queryString.push(transformationQuery)\n    }\n\n    let queryString = _queryString.join('&')\n    if (queryString !== '') {\n      queryString = `?${queryString}`\n    }\n\n    return {\n      data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n    }\n  }\n\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n   */\n  async remove(\n    paths: string[]\n  ): Promise<\n    | {\n        data: FileObject[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/object/${this.bucketId}`,\n        { prefixes: paths },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   */\n  async list(\n    path?: string,\n    options?: SearchOptions,\n    parameters?: FetchParameters\n  ): Promise<\n    | {\n        data: FileObject[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  private _getFinalPath(path: string) {\n    return `${this.bucketId}/${path}`\n  }\n\n  private _removeEmptyFolders(path: string) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\n  }\n\n  private transformOptsToQueryString(transform: TransformOptions) {\n    const params = []\n    if (transform.width) {\n      params.push(`width=${transform.width}`)\n    }\n\n    if (transform.height) {\n      params.push(`height=${transform.height}`)\n    }\n\n    if (transform.resize) {\n      params.push(`resize=${transform.resize}`)\n    }\n\n    if (transform.format) {\n      params.push(`format=${transform.format}`)\n    }\n\n    if (transform.quality) {\n      params.push(`quality=${transform.quality}`)\n    }\n\n    return params.join('&')\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}